{"task": "input_prediction", "ref_key": "hackerrank_GLM-4-Flash_19024_1_java_direct_1", "dataset": "hackerrank", "id": 19024, "test_case_idx": 1, "lang": "java", "difficulty": "Hard", "code/function": "import java.io.*;\nimport java.math.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.regex.*;\npublic class Solution {\n  static class Edge {\n        public int from, to;\n        public long weight, acc;\n        public Edge(int from, int to, long weight) {\n            this.from = from;\n            this.to = to;\n            this.weight = weight;\n        }\n    }\n    static HashMap<Integer, List<Edge>> connections = new HashMap<Integer, List<Edge>>(500000);\n    static int nodes;\n    static long f(int node) {\n        long b = System.currentTimeMillis();\n        long totalACCValue = 0;\n        LinkedList<Edge> queue = new LinkedList<Edge>();\n        List<Edge> list = connections.get(node);\n        for (int i = 0,count = list.size();i < count;i++) {\n            Edge edge = list.get(i);\n            edge.acc = edge.weight;\n            queue.addLast(edge);\n        }\n        while (!queue.isEmpty()) {\n            Edge current = queue.removeFirst();\n            long cACC = current.acc;\n            totalACCValue += cACC;\n            for (Edge edge : connections.get(current.to)) {\n                if (current.from == edge.to)\n                    continue;\n                queue.add(edge);\n                edge.acc = edge.weight + cACC;\n            }\n        }\n        System.out.println(System.currentTimeMillis() - b);\n        return totalACCValue;\n    }\n    \n}", "prompt_category": "direct", "prompt_id": 1, "prompt_template": "You are given a piece of code containing Java method `f` (already defined elsewhere) and a masked `public static void main` template where all inputs are `??`. Your task is to identify suitable inputs for each `??` with concrete, valid values so that, when combined with the existing class that contains `f`, the program compiles and the assertion in `main` holds true. No extra information except the filled `public static void main` code should be included in your submission.\nCode:\n{function}\nMasked main template:\n{assertion_query}", "wrapped_text": "You are given a piece of code containing Java method `f` (already defined elsewhere) and a masked `public static void main` template where all inputs are `??`. Your task is to identify suitable inputs for each `??` with concrete, valid values so that, when combined with the existing class that contains `f`, the program compiles and the assertion in `main` holds true. No extra information except the filled `public static void main` code should be included in your submission.\nCode:\nimport java.io.*;\nimport java.math.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.regex.*;\npublic class Solution {\n  static class Edge {\n        public int from, to;\n        public long weight, acc;\n        public Edge(int from, int to, long weight) {\n            this.from = from;\n            this.to = to;\n            this.weight = weight;\n        }\n    }\n    static HashMap<Integer, List<Edge>> connections = new HashMap<Integer, List<Edge>>(500000);\n    static int nodes;\n    static long f(int node) {\n        long b = System.currentTimeMillis();\n        long totalACCValue = 0;\n        LinkedList<Edge> queue = new LinkedList<Edge>();\n        List<Edge> list = connections.get(node);\n        for (int i = 0,count = list.size();i < count;i++) {\n            Edge edge = list.get(i);\n            edge.acc = edge.weight;\n            queue.addLast(edge);\n        }\n        while (!queue.isEmpty()) {\n            Edge current = queue.removeFirst();\n            long cACC = current.acc;\n            totalACCValue += cACC;\n            for (Edge edge : connections.get(current.to)) {\n                if (current.from == edge.to)\n                    continue;\n                queue.add(edge);\n                edge.acc = edge.weight + cACC;\n            }\n        }\n        System.out.println(System.currentTimeMillis() - b);\n        return totalACCValue;\n    }\n    \n}\nMasked main template:\npublic static void main(String[] args) {\n    Solution.connections = new java.util.HashMap<>();\n    java.util.List<Solution.Edge> list1 = new java.util.ArrayList<>();\n    list1.add(new Solution.Edge(1, 2, 10));\n    list1.add(new Solution.Edge(1, 3, 20));\n    Solution.connections.put(1, list1);\n    java.util.List<Solution.Edge> list2 = new java.util.ArrayList<>();\n    list2.add(new Solution.Edge(2, 4, 5));\n    Solution.connections.put(2, list2);\n    java.util.List<Solution.Edge> list3 = new java.util.ArrayList<>();\n    list3.add(new Solution.Edge(3, 4, 15));\n    Solution.connections.put(3, list3);\n    Solution.connections.put(4, new java.util.ArrayList<>());\n    int node = ??;\n    assert Solution.f(node) == 80;\n}", "model_name": "GLM-4-Flash", "response": ["```json\n{\n  \"input_prediction\": {\n    \"node\": 1\n  }\n}\n```"], "test_case_metadata": {"full_code": "public static void main(String[] args) {\n    Solution.connections = new java.util.HashMap<>();\n    java.util.List<Solution.Edge> list1 = new java.util.ArrayList<>();\n    list1.add(new Solution.Edge(1, 2, 10));\n    list1.add(new Solution.Edge(1, 3, 20));\n    Solution.connections.put(1, list1);\n    java.util.List<Solution.Edge> list2 = new java.util.ArrayList<>();\n    list2.add(new Solution.Edge(2, 4, 5));\n    Solution.connections.put(2, list2);\n    java.util.List<Solution.Edge> list3 = new java.util.ArrayList<>();\n    list3.add(new Solution.Edge(3, 4, 15));\n    Solution.connections.put(3, list3);\n    Solution.connections.put(4, new java.util.ArrayList<>());\n    int node = 1;\n    assert Solution.f(node) == 80;\n}", "input_masked_code": "public static void main(String[] args) {\n    Solution.connections = new java.util.HashMap<>();\n    java.util.List<Solution.Edge> list1 = new java.util.ArrayList<>();\n    list1.add(new Solution.Edge(1, 2, 10));\n    list1.add(new Solution.Edge(1, 3, 20));\n    Solution.connections.put(1, list1);\n    java.util.List<Solution.Edge> list2 = new java.util.ArrayList<>();\n    list2.add(new Solution.Edge(2, 4, 5));\n    Solution.connections.put(2, list2);\n    java.util.List<Solution.Edge> list3 = new java.util.ArrayList<>();\n    list3.add(new Solution.Edge(3, 4, 15));\n    Solution.connections.put(3, list3);\n    Solution.connections.put(4, new java.util.ArrayList<>());\n    int node = ??;\n    assert Solution.f(node) == 80;\n}", "output_masked_code": "public static void main(String[] args) {\n    Solution.connections = new java.util.HashMap<>();\n    java.util.List<Solution.Edge> list1 = new java.util.ArrayList<>();\n    list1.add(new Solution.Edge(1, 2, 10));\n    list1.add(new Solution.Edge(1, 3, 20));\n    Solution.connections.put(1, list1);\n    java.util.List<Solution.Edge> list2 = new java.util.ArrayList<>();\n    list2.add(new Solution.Edge(2, 4, 5));\n    Solution.connections.put(2, list2);\n    java.util.List<Solution.Edge> list3 = new java.util.ArrayList<>();\n    list3.add(new Solution.Edge(3, 4, 15));\n    Solution.connections.put(3, list3);\n    Solution.connections.put(4, new java.util.ArrayList<>());\n    int node = 1;\n    assert Solution.f(node) == ??;\n}", "test_case_idx": 1}, "_schema_version": 1}
{"task": "input_prediction", "ref_key": "hackerrank_GLM-4-Flash_127_1_java_direct_1", "dataset": "hackerrank", "id": 127, "test_case_idx": 1, "lang": "java", "difficulty": "Easy", "code/function": "import java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\npublic class Solution {\n     \n    private static int f(String number) {\n       int sum = 0;\n       char[] digits = number.toCharArray();\n       for(int i = 0; i < number.length(); i++){\n            if(Character.getNumericValue(digits[i]) != 0){ \n                if(((Integer.parseInt(number))% (Character.getNumericValue(digits[i]))) == 0){\n                    sum++;\n                }\n            }\n            else\n                continue;\n       }\n        return sum;\n    }\n}", "prompt_category": "direct", "prompt_id": 1, "prompt_template": "You are given a piece of code containing Java method `f` (already defined elsewhere) and a masked `public static void main` template where all inputs are `??`. Your task is to identify suitable inputs for each `??` with concrete, valid values so that, when combined with the existing class that contains `f`, the program compiles and the assertion in `main` holds true. No extra information except the filled `public static void main` code should be included in your submission.\nCode:\n{function}\nMasked main template:\n{assertion_query}", "wrapped_text": "You are given a piece of code containing Java method `f` (already defined elsewhere) and a masked `public static void main` template where all inputs are `??`. Your task is to identify suitable inputs for each `??` with concrete, valid values so that, when combined with the existing class that contains `f`, the program compiles and the assertion in `main` holds true. No extra information except the filled `public static void main` code should be included in your submission.\nCode:\nimport java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\npublic class Solution {\n     \n    private static int f(String number) {\n       int sum = 0;\n       char[] digits = number.toCharArray();\n       for(int i = 0; i < number.length(); i++){\n            if(Character.getNumericValue(digits[i]) != 0){ \n                if(((Integer.parseInt(number))% (Character.getNumericValue(digits[i]))) == 0){\n                    sum++;\n                }\n            }\n            else\n                continue;\n       }\n        return sum;\n    }\n}\nMasked main template:\npublic static void main(String[] args) {\n    String number = ??;\n    assert Solution.f(number) == 2;\n}", "model_name": "GLM-4-Flash", "response": ["```json\n{\"input_prediction\": \"123456\"}\n```"], "test_case_metadata": {"full_code": "public static void main(String[] args) {\n    String number = \"12\";\n    assert Solution.f(number) == 2;\n}", "input_masked_code": "public static void main(String[] args) {\n    String number = ??;\n    assert Solution.f(number) == 2;\n}", "output_masked_code": "public static void main(String[] args) {\n    String number = \"12\";\n    assert Solution.f(number) == ??;\n}", "test_case_idx": 1}, "_schema_version": 1}
