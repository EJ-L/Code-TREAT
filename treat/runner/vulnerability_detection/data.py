class BaseData:
    def __init__(self, idx, project, commit_id):
        self.idx = idx
        self.project = project
        self.commit_id = commit_id
        self.key = project + "_" + commit_id

    def __str__(self):
        # print(self.__dict__.items())
        string_list = []
        for key, value in self.__dict__.items():
            string_list.append(f"{key}:\n{value}")
        return '\n'.join(string_list)

class PrimeVulPairData(BaseData):
    def __init__(self, idx, project, commit_id, project_url, commit_url, commit_message, target, func, func_hash, file_name, file_hash, cwe, cve, cve_desc, nvd_url):
        super().__init__(idx, project, commit_id)
        self.project_url = project_url
        self.commit_url = commit_url
        self.commit_message = commit_message
        self.target = target
        self.func = func
        self.func_hash = func_hash
        self.file_name = file_name
        self.file_hash = file_hash
        self.cwe = cwe
        self.cve = cve
        self.cve_desc = cve_desc
        self.nvd_url = nvd_url

        
class PrimeVulData(BaseData):
    def __init__(self, idx, project, commit_id, target, func, hash, cwe):
        self.dataset_name = "primevul"
        super().__init__(idx, project, commit_id)
        self.target = target
        self.func = func
        self.func_hash = hash
        self.cwe = cwe
        # self.dataset = dataset

class PrimeVulPair:
    def __init__(self, data1: PrimeVulPairData, data2: PrimeVulPairData):
        self.dataset_name = "primevul_pair"
        self.data1 = data1
        self.data2 = data2
        self.pair = [data1, data2]
        self.idx = ','.join([str(data1.idx), str(data2.idx)])
        self.target = [data1.target, data2.target] 
        self.key = self.data1.key + "_" + self.data2.key
        
    def __iter__(self):
        return iter(self.pair)